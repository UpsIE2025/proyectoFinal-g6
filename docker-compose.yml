version: '3.8'
services:
  kong:
    image: kong:latest
    container_name: kong
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/usr/local/kong/kong.yml"
    volumes:
      - ./kong/kong.yml:/usr/local/kong/kong.yml
    networks:
      - my-network
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=admindatabase
      - POSTGRES_PASSWORD=admindatabase
      - POSTGRES_DB=mydatabase
    command: [ "postgres", "-c", "wal_level=logical" ]
    networks:
      - my-network
   
  mysql:
    image: mysql:5.7
    container_name: mysql
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: mydatabase
    networks:
      - my-network
      
  kafka:
    image: apache/kafka:latest
    container_name: broker
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - my-network

  kafka-productor:
    build:
      context: ./kafka-productor
      dockerfile: Dockerfile
    container_name: kafka-productor
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8090:8090"
    networks:
      - my-network

  kafka-consumer:
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    container_name: kafka-consumer
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8070:8070"
    networks:
      - my-network

  auth-api:
    build:
      context: ./Auth0
      dockerfile: Dockerfile
    container_name: auth0
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Auth0__Domain=https://dev-q7eednrlae4yxvel.us.auth0.com/
      - Auth0__Audience=https://auth0APIKevin
      - Auth0__client_id=Dcqawg99cWzahtkyavoY5nC3uq35aUDt
      - Auth0__client_secret =60YCBP0JzvzmJr2qAHkOiF2yGdDCsgyBqYj3dKEgrBLtBaHZunnchbVi7kIMaE7Z
      - Auth0__grant_type=client_credentials
      - Auth0__kafkaProductor=http://kafka-productor:8090/api/kafka/send
      - ASPNETCORE_PORT=8082
    ports:
      - "8082:8082"
    networks:
      - my-network
  api-gateway:
    build: ./api_gateway/gateway
    ports:
      - "4000:4000"
    environment:
      DB_HOST: 209.94.59.49
      DB_USER: admindatabase
      DB_PASSWORD: admindatabase
      DB_NAME: mydatabase
    networks:
      - my-network

  zookeeper_cdc:
    image: zookeeper:3.9.0
    container_name: zookeeper_cdc
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - my-network
      
  kafka_cdc:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka_cdc
    ports:
      - 9094:9094
      - 9095:9095
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper_cdc:2181
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka_cdc:9094,EXTERNAL://127.0.0.1:9095
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9094,EXTERNAL://0.0.0.0:9095
    depends_on:
      - zookeeper
    networks:
      - my-network

  debezium_connector:
    image: debezium/connect:3.0.0.Final
    container_name: debezium_connector
    ports:
      - 8083:8083
      - 5005:5005
    links:
      - kafka_cdc
      - postgres
    environment:
      - BOOTSTRAP_SERVERS=kafka_cdc:9094
      - GROUP_ID=debezium-events
      - CONFIG_STORAGE_TOPIC=debezium_configs
      - OFFSET_STORAGE_TOPIC=debezium_offsets
      - STATUS_STORAGE_TOPIC=debezium_statuses
    networks:
      - my-network
      
  kafka_ui_cdc:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui_cdc
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka_cdc:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper_cdc:2181
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "9000:8080"
    depends_on:
      - kafka_cdc
    networks:
      - my-network
  debezium_ui:
    image: debezium/debezium-ui:2.4
    container_name: debezium_ui
    platform: linux/amd64
    environment:
      - KAFKA_CONNECT_URIS=http://debezium_connector:8083  
    ports:
      - 9091:8080
    depends_on:
      - debezium_connector
    networks:
      - my-network

  micro:
    build: ./cdc-debezium/micro
    container_name: micro
    ports:
      - "8084:8084"
    depends_on:
      - mysql
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: mydatabase
      DB_USER: admin
      DB_PASSWORD: admin
      KAFKA: kafka_cdc
    networks:
      - my-network
      
networks:
  my-network:
    driver: bridge
